// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaFruit.Models {
    public class MeteoriteLanding : IParsable {
        /// <summary>The fall property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fall { get; set; }
#nullable restore
#else
        public string Fall { get; set; }
#endif
        /// <summary>The geolocation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaFruit.Models.Geolocation? Geolocation { get; set; }
#nullable restore
#else
        public KiotaFruit.Models.Geolocation Geolocation { get; set; }
#endif
        /// <summary>The id property</summary>
        public long? Id { get; set; }
        /// <summary>The mass property</summary>
        public double? Mass { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The nametype property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nametype { get; set; }
#nullable restore
#else
        public string Nametype { get; set; }
#endif
        /// <summary>The recclass property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Recclass { get; set; }
#nullable restore
#else
        public string Recclass { get; set; }
#endif
        /// <summary>The reclat property</summary>
        public double? Reclat { get; set; }
        /// <summary>The reclong property</summary>
        public double? Reclong { get; set; }
        /// <summary>The year property</summary>
        public Date? Year { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MeteoriteLanding CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MeteoriteLanding();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"fall", n => { Fall = n.GetStringValue(); } },
                {"geolocation", n => { Geolocation = n.GetObjectValue<KiotaFruit.Models.Geolocation>(KiotaFruit.Models.Geolocation.CreateFromDiscriminatorValue); } },
                {"id", n => { Id = n.GetLongValue(); } },
                {"mass", n => { Mass = n.GetDoubleValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"nametype", n => { Nametype = n.GetStringValue(); } },
                {"recclass", n => { Recclass = n.GetStringValue(); } },
                {"reclat", n => { Reclat = n.GetDoubleValue(); } },
                {"reclong", n => { Reclong = n.GetDoubleValue(); } },
                {"year", n => { Year = n.GetDateValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("fall", Fall);
            writer.WriteObjectValue<KiotaFruit.Models.Geolocation>("geolocation", Geolocation);
            writer.WriteLongValue("id", Id);
            writer.WriteDoubleValue("mass", Mass);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("nametype", Nametype);
            writer.WriteStringValue("recclass", Recclass);
            writer.WriteDoubleValue("reclat", Reclat);
            writer.WriteDoubleValue("reclong", Reclong);
            writer.WriteDateValue("year", Year);
        }
    }
}
